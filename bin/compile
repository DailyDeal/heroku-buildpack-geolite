#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

SCRIPT="heroku-buildpack-geolite/compile"

# fail fast
set -e

# debug
# set -x

put() {
  echo "       " "$*"
}

put ""
put "script started in__ $(pwd)"
put "script started with $*"
put ""

# clean up leaking environment
unset GIT_DIR

# config

# parse and derive params
[ -z "$1" ] && TEMP_DIR=$(mktemp -d /tmp/heroku_buldpack_geolite.XXXXXX)
BUILD_DIR=${1:-$TEMP_DIR/build}
CACHE_DIR=${2:-$TEMP_DIR/cache}
ENV_DIR=${3:-$TEMP_DIR/env}

put "started with:\
  BUILD_DIR: $BUILD_DIR,\
  CACHE_DIR: $CACHE_DIR,\
  ENV_DIR: $ENV_DIR\
"

GEOLITE_DIR=vendor/geolite
DOWNLOADER=$GEOLITE_DIR/bin/geolite_download

PROFILE=$BUILD_DIR/.profile.d/geolite.sh
mkdir -p $(dirname $PROFILE)
[ -f $PROFILE ] && put "$PROFILE profile already exist: $PROFILE" && exit 1

cat <<EOF >$PROFILE
  /app/$DOWNLOADER &
EOF
put "profile___ created: $PROFILE"

DOWNLOAD_DIR=$GEOLITE_DIR/downloads
DOWNLOADER=$BUILD_DIR/$DOWNLOADER
[ -d $BUILD_DIR/$GEOLITE_DIR ] && put "error: directory already exist: $BUILD_DIR/$GEOLITE_DIR" && exit 1
mkdir -p $BUILD_DIR/$DOWNLOAD_DIR
mkdir -p $(dirname $DOWNLOADER)

cat <<EOF >$DOWNLOADER
#!/usr/bin/env bash
# geolite_download [<home-dir>] # into -> <home-dir>/$DOWNLOAD_DIR/<day>-<time>.<pid>/

SCRIPT="\$0"

# fail fast
set -e

# debug
# set -x

put() {
  echo "\$SCRIPT:" "\$*"
}

put ""
put "script started in__ \$(pwd)"
put "script started with \$*"
put ""

HOME_DIR=\${1:-\$HOME}

if [ ! -z "\$GEOLITE_CITY_TARGET_PATH" ]; then
  GEOLITE_CITY_TARGET_PATH_MD5=\$GEOLITE_CITY_TARGET_PATH.md5
  mkdir -p \$(dirname \$GEOLITE_CITY_TARGET_PATH)
  touch \$GEOLITE_CITY_TARGET_PATH
  touch \$GEOLITE_CITY_TARGET_PATH_MD5
  [ -z "\$GEOLITE_CITY_SOURCE_URL" ] && cat /dev/null >\$GEOLITE_CITY_TARGET_PATH && cat /dev/null >\$GEOLITE_CITY_TARGET_PATH_MD5
else
  unset GEOLITE_CITY_TARGET_PATH_MD5
fi

if [ ! -z "\${GEOLITE_CITY_SOURCE_URL}" ]; then
  [ -z "\${GEOLITE_CITY_TARGET_PATH}" ] && GEOLITE_CITY_TARGET_PATH=\$HOME_DIR/$GEOLITE_DIR/\$(basename \$GEOLITE_CITY_SOURCE_URL .tar.gz).db
  GEOLITE_CITY_TARGET_PATH_MD5=\$GEOLITE_CITY_TARGET_PATH.md5
  for TARGET in \$GEOLITE_CITY_TARGET_PATH \$GEOLITE_CITY_TARGET_PATH_MD5; do
    [ ! -f \$TARGET ] && mkdir -p \$(dirname \$TARGET && touch \$TARGET)
  done

  DOWNLOAD_DIR=\$HOME_DIR/$DOWNLOAD_DIR/\$(date +%Y%m%d-%H%M%S).\$\$
  mkdir \$DOWNLOAD_DIR

  cd \$DOWNLOAD_DIR

  curl -Os \$GEOLITE_CITY_SOURCE_URL.md5
  DOWNLOADED_MD5=\$(find . -name '*.tar.gz.md5')

  if \$(cmp -s \$GEOLITE_CITY_TARGET_PATH_MD5 \$DOWNLOADED_MD5); then
    put "DB creating ended at \$(date +%H:%M:%S): md5-s are equal -> no download needed"
  else
    put "Download started  at \$(date +%H:%M:%S) from \$GEOLITE_CITY_SOURCE_URL into \$DOWNLOAD_DIR ..."

    curl -Os \$GEOLITE_CITY_SOURCE_URL
    DOWNLOADED_FILE=\$(find . -name '*.tar.gz')

    put "Download finished at \$(date +%H:%M:%S), creating database ..."

    gunzip -c \$DOWNLOADED_FILE | tar -x
    DOWNLOADED_DB=\$(find . -name '*.mmdb')

    cat \$DOWNLOADED_DB  >\$GEOLITE_CITY_TARGET_PATH
    cat \$DOWNLOADED_MD5 >\$GEOLITE_CITY_TARGET_PATH_MD5

    rm -rf \$(dirname \$DOWNLOADED_DB)

    put "DB creating ended at \$(date +%H:%M:%S): \$GEOLITE_CITY_TARGET_PATH"
  fi
else
  put "nothing to do (use GEOLITE_CITY_SOURCE_URL to download data)"
fi
EOF
chmod +x $DOWNLOADER
put "downloader created: $DOWNLOADER"

echo "-----> geolite done"
echo ""
